// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	produk "project/kutsuya/features/produk"

	mock "github.com/stretchr/testify/mock"
)

// ProdukData is an autogenerated mock type for the DataInterface type
type ProdukData struct {
	mock.Mock
}

// DeleteProduk provides a mock function with given fields: id_user, id_produk
func (_m *ProdukData) DeleteProduk(id_user int, id_produk int) (int, error) {
	ret := _m.Called(id_user, id_produk)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(id_user, id_produk)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id_user, id_produk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduk provides a mock function with given fields: data
func (_m *ProdukData) InsertProduk(data produk.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(produk.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(produk.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProdukById provides a mock function with given fields: id
func (_m *ProdukData) SelectProdukById(id int) (produk.Core, error) {
	ret := _m.Called(id)

	var r0 produk.Core
	if rf, ok := ret.Get(0).(func(int) produk.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(produk.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select_AllProduk provides a mock function with given fields:
func (_m *ProdukData) Select_AllProduk() ([]produk.Core, error) {
	ret := _m.Called()

	var r0 []produk.Core
	if rf, ok := ret.Get(0).(func() []produk.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]produk.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataProduk provides a mock function with given fields: data, id
func (_m *ProdukData) UpdateDataProduk(data produk.Core, id int) (int, error) {
	ret := _m.Called(data, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(produk.Core, int) int); ok {
		r0 = rf(data, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(produk.Core, int) error); ok {
		r1 = rf(data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProdukData interface {
	mock.TestingT
	Cleanup(func())
}

// NewProdukData creates a new instance of ProdukData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProdukData(t mockConstructorTestingTNewProdukData) *ProdukData {
	mock := &ProdukData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
