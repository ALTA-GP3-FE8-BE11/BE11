// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	shopping_cart "project/kutsuya/features/shopping_cart"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the DataInterface type
type CartData struct {
	mock.Mock
}

// CreateCart provides a mock function with given fields: data
func (_m *CartData) CreateCart(data shopping_cart.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(shopping_cart.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shopping_cart.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelCartByID provides a mock function with given fields: cart_id, user_id
func (_m *CartData) DelCartByID(cart_id int, user_id int) (int, error) {
	ret := _m.Called(cart_id, user_id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(cart_id, user_id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(cart_id, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCarts provides a mock function with given fields: user_id
func (_m *CartData) FindCarts(user_id int) ([]shopping_cart.Core, error) {
	ret := _m.Called(user_id)

	var r0 []shopping_cart.Core
	if rf, ok := ret.Get(0).(func(int) []shopping_cart.Core); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shopping_cart.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByID provides a mock function with given fields: cart_id
func (_m *CartData) GetCartByID(cart_id int) (shopping_cart.Core, error) {
	ret := _m.Called(cart_id)

	var r0 shopping_cart.Core
	if rf, ok := ret.Get(0).(func(int) shopping_cart.Core); ok {
		r0 = rf(cart_id)
	} else {
		r0 = ret.Get(0).(shopping_cart.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cart_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartData(t mockConstructorTestingTNewCartData) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
